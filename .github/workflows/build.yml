name: LogicAppUnit-Build

on:
  push:
    branches:
    - main
    - 'features/**'
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:

  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
  
    # Build .NET solution

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
  
    - name: Restore dependencies
      run: dotnet restore
  
    - name: Build
      run: dotnet build --no-restore

    # Install and configure Logic Apps runtime environment

    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install Functions Core tools
      run: 'npm install -g azure-functions-core-tools@4 --unsafe-perm true'

    #- name: Set Functions Core tools path (Windows only)
    #  if: matrix.os == 'windows-latest'
    #  run: 'setx Path "C:\npm\prefix\node_modules\azure-functions-core-tools\bin;%Path%'
    #  shell: cmd

    - name: Check Functions Core tools installation
      run: 'func'

    - name: Path Check (User)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        [Environment]::GetEnvironmentVariable('Path', 'User').Split(";") | foreach { $fullPath = [IO.Path]::Combine($_, "func.exe"); $fileExists = [IO.File]::Exists($fullPath); Write-Host "$fileExists - $fullPath" }

    - name: Path Check (Process)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        [Environment]::GetEnvironmentVariable('Path', 'Process').Split(";") | foreach { $fullPath = [IO.Path]::Combine($_, "func.exe"); $fileExists = [IO.File]::Exists($fullPath); Write-Host "$fileExists - $fullPath" }

    - name: Path Check (Machine)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        [Environment]::GetEnvironmentVariable('Path', 'Machine').Split(";") | foreach { $fullPath = [IO.Path]::Combine($_, "func.exe"); $fileExists = [IO.File]::Exists($fullPath); Write-Host "$fileExists - $fullPath" }
    
    - name: Install Azurite
      run: 'npm install -g azurite@3.24.0'

    - name: Start Azurite services
      run: 'azurite &'
      shell: bash

    # Run tests

    - name: Run tests
      run: dotnet test --no-restore --verbosity normal --logger "trx"

    # Publish artefacts and test results

    - name: Publish test log
      uses: actions/upload-artifact@v3
      if: success() || failure()
      with:
        name: test-results.${{ matrix.os }}
        path: ${{ github.workspace }}/LogicAppUnit.Samples.LogicApps.Tests/TestResults/*.trx

    - name: Publish test results
      if: (success() || failure()) && github.event_name != 'pull_request'
      uses: dorny/test-reporter@v1
      with:
        name: Test Results (${{ matrix.os }})
        path: ${{ github.workspace }}/LogicAppUnit.Samples.LogicApps.Tests/TestResults/*.trx
        path-replace-backslashes: true
        reporter: dotnet-trx