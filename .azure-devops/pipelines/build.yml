# Manual trigger only
trigger: none

parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: Debug
  values:
    - Debug
    - Release

jobs:
- job: build
  displayName: 'Build'
  timeoutInMinutes: 20

  strategy:
    matrix:
      Linux:
        imageName: 'ubuntu-latest'
        matrixName: Linux
      Windows:
        imageName: 'windows-latest'
        matrixName: Windows
      #Mac:
      #  imageName: 'macOS-latest'
      #  matrixName: Mac

  pool:
    vmImage: $(imageName)

  steps:

    # Build .NET solution

    - task: UseDotNet@2
      displayName: 'Setup .NET'
      inputs:
        packageType: sdk
        version: '6.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: restore
        verbosityRestore: Normal
        projects: '$(System.DefaultWorkingDirectory)/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build (${{ parameters.buildConfiguration }})'
      inputs:
        command: build
        arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
        projects: '$(System.DefaultWorkingDirectory)/**/*.csproj'

    # Install and configure Logic Apps runtime environment

    - task: NodeTool@0
      displayName: 'Setup node'
      inputs:
        versionSpec: '18.x'

    - task: FuncToolsInstaller@0
      displayName: 'Install Functions core tools'
      inputs:
        version: 'latest'

    - task: CmdLine@2
      displayName: 'Check Functions Core tools installation'
      inputs:
        script: func

    - task: PowerShell@2
      displayName: Path Check (Process)
      inputs:
        targetType: inline
        script: |
          [Environment]::GetEnvironmentVariable('Path').Split(";") | foreach { $fullPath = [IO.Path]::Combine($_, "func.exe"); $fileExists = [IO.File]::Exists($fullPath); Write-Host "$fileExists - $fullPath" }

    - task: PowerShell@2
      displayName: Path Check (Machine)
      inputs:
        targetType: inline
        script: |
          [Environment]::GetEnvironmentVariable('Path', 'Machine').Split(";") | foreach { $fullPath = [IO.Path]::Combine($_, "func.exe"); $fileExists = [IO.File]::Exists($fullPath); Write-Host "$fileExists - $fullPath" }

    - task: Npm@1
      displayName: 'Install Azurite'
      inputs:
        command: 'custom'
        customCommand: 'install -g azurite@3.24.0'

    - task: CmdLine@2
      condition: and(succeeded(), ne(variables.matrixName, 'Windows'))
      displayName: 'Start Azurite services (not Windows)'
      inputs:
        script: 'azurite &'

    - task: CmdLine@2
      condition: and(succeeded(), eq(variables.matrixName, 'Windows'))
      displayName: 'Start Azurite services (Windows)'
      inputs:
        script: 'start /b azurite'

    # Run tests and publish test results to Azure DevOps

    - task: DotNetCoreCLI@2
      continueOnError: true
      displayName: 'Run tests'
      inputs:
        command: test
        arguments: '--no-restore --verbosity normal --configuration ${{ parameters.buildConfiguration }}'
        projects: '$(System.DefaultWorkingDirectory)/**/*.Tests.csproj'
        publishTestResults: true
        testRunTitle: 'Tests ($(matrixName))'

    # Publish NuGet package

    - task: PublishPipelineArtifact@1
      displayName: 'Publish NuGet package (Release build only)'
      condition: and(succeeded(), eq('${{ parameters.buildConfiguration }}', 'Release'))
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/LogicAppUnit/bin/${{ parameters.buildConfiguration }}'
        artifact: 'NuGetPackage-$(matrixName)'
        publishLocation: 'pipeline'