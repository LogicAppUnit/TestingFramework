# Manual trigger only
trigger: none
pr: none

parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: Debug
  values:
    - Debug
    - Release

jobs:
- job: build
  displayName: 'Build'
  timeoutInMinutes: 30

  strategy:
    matrix:
      Linux:
        imageName: 'ubuntu-latest'
        matrixName: Linux
      Windows:
        imageName: 'windows-latest'
        matrixName: Windows
      Mac:
       imageName: 'macOS-latest'
       matrixName: Mac

  pool:
    vmImage: $(imageName)

  steps:

    # Build .NET solution

    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: restore
        verbosityRestore: Normal
        projects: '$(System.DefaultWorkingDirectory)/src/LogicAppUnit.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build (${{ parameters.buildConfiguration }})'
      inputs:
        command: build
        arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
        projects: '$(System.DefaultWorkingDirectory)/src/LogicAppUnit.sln'

    # Install and configure Logic Apps runtime environment

    - task: FuncToolsInstaller@0
      displayName: 'Install Functions core tools'
      inputs:
        version: 'latest'

    - task: Npm@1
      displayName: 'Install Azurite'
      inputs:
        command: 'custom'
        customCommand: 'install -g azurite@3.34.0'

    - task: CmdLine@2
      displayName: 'Start Azurite services (not Windows)'
      condition: and(succeeded(), ne(variables.matrixName, 'Windows'))
      inputs:
        script: 'azurite &'

    - task: CmdLine@2
      displayName: 'Start Azurite services (Windows)'
      condition: and(succeeded(), eq(variables.matrixName, 'Windows'))
      inputs:
        script: 'start /b azurite'

    # Check software versions

    - task: CmdLine@2
      displayName: 'Check dotnet SDK installation'
      inputs:
        script: dotnet --info

    - task: CmdLine@2
      displayName: 'Check node installation'
      inputs:
        script: node --version

    - task: CmdLine@2
      displayName: 'Check Functions Core tools installation'
      inputs:
        script: func --version

    # Run tests and publish test results to Azure DevOps

    - task: DotNetCoreCLI@2
      displayName: 'Run tests (not Windows)'
      condition: and(succeeded(), ne(variables.matrixName, 'Windows'))
      continueOnError: true
      inputs:
        command: test
        arguments: '--no-restore --verbosity normal --configuration ${{ parameters.buildConfiguration }} --filter TestCategory!="WindowsOnly"'
        projects: '$(System.DefaultWorkingDirectory)/src/LogicAppUnit.sln'
        publishTestResults: true
        testRunTitle: 'Tests ($(matrixName))'

    # - task: DotNetCoreCLI@2                            # there is an issue with Azurite ports being blocked when running tests on Windows build servers
    #   displayName: 'Run tests (Windows)'
    #   condition: and(succeeded(), eq(variables.matrixName, 'Windows'))
    #   continueOnError: true
    #   inputs:
    #     command: test
    #     arguments: '--no-restore --verbosity normal --configuration ${{ parameters.buildConfiguration }}'
    #     projects: '$(System.DefaultWorkingDirectory)/src/LogicAppUnit.sln'
    #     publishTestResults: true
    #     testRunTitle: 'Tests ($(matrixName))'

    # Publish NuGet package

    - task: PublishPipelineArtifact@1
      displayName: 'Publish NuGet package (Release build only)'
      condition: and(succeeded(), eq('${{ parameters.buildConfiguration }}', 'Release'))
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/src/LogicAppUnit/bin/${{ parameters.buildConfiguration }}'
        artifact: 'NuGetPackage-$(matrixName)'
        publishLocation: 'pipeline'